from manim import *

class LimitApproachScene(Scene):
    def construct(self):
        # Create axes
        axes = Axes(
            x_range=[-1, 3, 0.5],
            y_range=[-5, 5, 1],
            axis_config={"include_tip": False},
        ).add_coordinates()

        # Define the function
        func = lambda x: x**2 - 4
        graph = axes.plot(func, color=BLUE, x_range=[-1, 3])

        # Add labels for axes
        x_label = axes.get_x_axis_label("x")
        y_label = axes.get_y_axis_label("f(x)")

        # Highlight the point of interest
        limit_point = axes.input_to_graph_point(1, graph)
        limit_dot = Dot(limit_point, color=YELLOW)
        limit_value_label = MathTex("(-3)").next_to(limit_dot, LEFT)

        # Approaching dots from both sides
        left_dot = Dot(axes.c2p(0.5, func(0.5)), color=RED)
        right_dot = Dot(axes.c2p(1.5, func(1.5)), color=GREEN)

        # Trajectories for the dots
        left_trajectory = lambda t: axes.c2p(1 - t, func(1 - t))
        right_trajectory = lambda t: axes.c2p(1 + t, func(1 + t))

        # Annotations
        left_label = MathTex("x \to 1^-").next_to(left_dot, LEFT)
        right_label = MathTex("x \to 1^+").next_to(right_dot, RIGHT)

        # Add everything to the scene
        self.add(axes, graph, x_label, y_label, limit_dot, limit_value_label)

        # Animations
        self.play(FadeIn(left_label, right_label))
        self.play(FadeIn(left_dot, right_dot))
        
        self.play(
            MoveAlongPath(left_dot, ParametricFunction(left_trajectory, t_range=[0.5, 0], color=RED)),
            MoveAlongPath(right_dot, ParametricFunction(right_trajectory, t_range=[0.5, 0], color=GREEN)),
            run_time=4
        )

        self.play(FadeOut(left_label, right_label), FadeOut(left_dot, right_dot))

        # Final emphasize the limit
        self.play(Circumscribe(limit_dot, color=YELLOW))
        self.wait()